import configparserimport threadingimport requestsfrom time import sleepfrom configparser import ConfigParserfrom os import system, namefrom threading import Thread, active_countfrom re import search, compilePROXIES_TYPES = ('http', 'socks4', 'socks5')USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36'REGEX = compile(r"(?:^|\D)?(("+ r"(?:[1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"                + r"\." + r"(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"                + r"\." + r"(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"                + r"\." + r"(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"                + r"):" + (r"(?:\d|[1-9]\d{1,3}|[1-5]\d{4}|6[0-4]\d{3}"                + r"|65[0-4]\d{2}|655[0-2]\d|6553[0-5])")                + r")(?:\D|$)")errors = open('errors.txt', 'a+')#cfg = ConfigParser(interpolation=None)#cfg.read("config.ini", encoding="utf-8")#http, socks4, socks5 = '', '', ''#try: http, socks4, socks5 = cfg["HTTP"], cfg["SOCKS4"], cfg["SOCKS5"]#except KeyError: print(' [ OUTPUT ] Error |not found!');sleep(3);exit()http_proxies, socks4_proxies, socks5_proxies = [], [], []proxy_errors, token_errors = 0, 0time_out, real_views = 15, 0initial_views = 0stopEvent = threading.Event()CurrentlyError = Trueconfig = configparser.ConfigParser()config.read("config.ini")target_views = int(config['Telegram']['View_Limit'])THREADS = int(config['Telegram']['OldViewsThreadNo'])# Define the proxy URLPROXY_URL = "http://tzgpwcyp-rotate:4vz5xwlk449c@p.webshare.io:80/"# ... (rest of your code)def scrap(sources, _proxy_type):    for source in sources:        if stopEvent.is_set():            return 0        if source:            try:                response = requests.get(source, timeout=time_out, proxies={"http": PROXY_URL, "https": PROXY_URL})            except Exception as e:                errors.write(f'{e}\n')            if tuple(REGEX.finditer(response.text)):                for proxy in tuple(REGEX.finditer(response.text)):                    if _proxy_type == 'http':                        http_proxies.append(proxy.group(1))                    elif _proxy_type == 'socks4':                        socks4_proxies.append(proxy.group(1))                    elif _proxy_type == 'socks5':                        socks5_proxies.append(proxy.group(1))def start_scrap():    if stopEvent.is_set():        return 0    http = open("auto/http.txt", "r").read()    socks4 = open("auto/socks4.txt", "r").read()    socks5 = open("auto/socks5.txt", "r").read()    threads = []    for i in (http_proxies, socks4_proxies, socks5_proxies): i.clear()    for i in ((http.splitlines(), 'http'), (socks4.splitlines(), 'socks4'), (socks5.splitlines(), 'socks5')):        thread = Thread(target=scrap, args=(i[0], i[1]))        threads.append(thread)        thread.start()    for t in threads:        t.join()def get_token(proxy, proxy_type, channel, post):    try:        session = requests.session()        response = session.get(f'https://t.me/{channel}/{post}', params={'embed': '1', 'mode': 'tme'},                    headers={'referer': f'https://t.me/{channel}/{post}', 'user-agent': USER_AGENT},                    proxies={'http': f'{proxy_type}://{proxy}', 'https': f'{proxy_type}://{proxy}'},                    timeout=time_out)        return search('data-view="([^"]+)', response.text).group(1), session    except AttributeError: return 2    except requests.exceptions.RequestException: 1    except Exception as e: return errors.write(f'{e}\n')def send_view(token, session, proxy, proxy_type, channel, post):    global CurrentlyError    if not CurrentlyError:        try:            cookies_dict = session.cookies.get_dict()            response = session.get('https://t.me/v/', params={'views': str(token)}, cookies={                'stel_dt': '-240', 'stel_web_auth': 'https%3A%2F%2Fweb.telegram.org%2Fz%2F',                'stel_ssid': cookies_dict.get('stel_ssid', None), 'stel_on': cookies_dict.get('stel_on', None)},                                headers={'referer': f'https://t.me/{channel}/{post}?embed=1&mode=tme',                                    'user-agent': USER_AGENT, 'x-requested-with': 'XMLHttpRequest'},                                proxies={'http': f'{proxy_type}://{proxy}', 'https': f'{proxy_type}://{proxy}'},                                timeout=time_out)            return True if (response.status_code == 200 and response.text == 'true') else False        except requests.exceptions.RequestException: 1        except Exception: passdef control(proxy, proxy_type, channel, post):    if stopEvent.is_set():        #print("startviewstop")        return 0    global proxy_errors, token_errors, CurrentlyError    CurrentlyError = False    token_data = get_token(proxy, proxy_type, channel, post)    if token_data == 2:        token_errors += 1        CurrentlyError = True    elif token_data == 1:        CurrentlyError = True        print('error')        proxy_errors += 1    elif token_data:        send_data = send_view(token_data[0], token_data[1], proxy, proxy_type, channel, post)        if send_data == 1:            #print('error')            CurrentlyError = True            proxy_errors += 1def start_view(channel, post):    if stopEvent.is_set():        #print("startviewstop")        return 0    c, threads = 0, []    start_scrap()    for i in [http_proxies, socks4_proxies, socks5_proxies]:        for j in i:            thread = Thread(target=control, args=(j, PROXIES_TYPES[c], channel, post))            threads.append(thread)            while active_count() > THREADS: sleep(0.05)            thread.start()        c += 1        sleep(2)    for t in threads:        t.join()        start_view(channel, post)# ... (Previous code)# Add a new global variable for the target viewsdef close_cmd():    try:        exit()        subprocess.run("taskkill /F /IM py.exe", shell=True, check=True)        print("Command Prompt closed successfully.")    except subprocess.CalledProcessError:        print("Failed to close Command Prompt.")def check_views(channel, post):    global real_views    while True:        try:            telegram_request = requests.get(f'https://t.me/{channel}/{post}', params={'embed': '1', 'mode': 'tme'},                                headers={'referer': f'https://t.me/{channel}/{post}', 'user-agent': USER_AGENT})            real_views = search('<span class="tgme_widget_message_views">([^<]+)', telegram_request.text).group(1)            sleep(2)            def stringtoInt(value):                viewsInt = 0                value = value.lower()                if 'k' in value:                    tempval = float(value.replace('k', ''))                    tempval = tempval * 1000                    viewsInt = int(tempval)                else:                    viewsInt = int(value.replace(',', ''))                return viewsInt            # Check if the target views are reached            if stringtoInt(real_views) >= target_views or (proxy_errors+initial_views) >= target_views:                print(f'Target views ({target_views}) reached. Resetting...')                stopEvent.set()                return 0                #close_cmd()# Exit the program gracefully when target views are reached        except:            print("Error getting message views. Going to next message.")            stopEvent.set()            return  0            pass        if stopEvent.is_set():            return 0def tui(channel, post):    while True:        if stopEvent.is_set():            return 0        print("Auto Viewing Tool")        print(f'''  [ Data ]: {channel.capitalize()}/{post}  [ Live Views ]: {real_views}   [ Connection Errors ]: {proxy_errors}  [ Token Errors ]: {token_errors}   [ Threads ]: {active_count()}        ''')        sleep(2);system('cls' if name == 'nt' else 'clear')def beginSearch(channel, post, initViews, isNewViews, oldViewsnumber):    channel = channel.replace('https://t.me/', '')    stopEvent.clear()    global initial_views, proxy_errors, token_errors, THREADS, target_views    initial_views = initViews    proxy_errors = 0    token_errors = 0    if isNewViews:        THREADS = int(config['Telegram']['NewViewsThreadNo'])    else:        if oldViewsnumber > 0:            target_views = oldViewsnumber    # Change this to your desired target views    stopThreads = False    print(channel)    try:        search('<span class="tgme_widget_message_views">([^<]+)', requests.get(f'https://t.me/{channel}/{post}',        params={'embed': '1', 'mode': 'tme'}, headers={'referer': f'https://t.me/{channel}/{post}', 'user-agent': USER_AGENT}).text).group(1)    except:        print(' [ OUTPUT ] Error | Channel Or Post Not Found!')        sleep(3)        exit()    else:        print(' [ OUTPUT ] Stated | Wait few seconds to run threads')        startViewThread = Thread(target=start_view, args=[channel, post])        checkViewThread = Thread(target=check_views, args=[channel, post])        tuiThread = Thread(target=tui, args=[channel, post])        startViewThread.start()        checkViewThread.start()        sleep(7.5);system('cls' if name == 'nt' else 'clear')        tuiThread.start()        startViewThread.join()        checkViewThread.join()        tuiThread.join()        print("Finished Messange No." + str(post) + "Waiting for next...")        return